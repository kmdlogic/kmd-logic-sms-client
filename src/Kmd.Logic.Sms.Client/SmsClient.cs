using System;
using System.Net.Http;
using System.Threading.Tasks;
using Kmd.Logic.FileSecurity.Client;
using Kmd.Logic.Identity.Authorization;
using Microsoft.Rest;

namespace Kmd.Logic.Sms.Client
{
    /// <summary>
    /// Class to use the autogenerated client class to call APIs.
    /// </summary>
    public sealed class SmsClient : IDisposable
    {
        private readonly HttpClient httpClient;
        private readonly SmsOptions options;
        private readonly ITokenProviderFactory tokenProviderFactory;
        private InternalClient internalClient;
        private string bearerToken;

        /// <summary>
        /// Initializes a new instance of the <see cref="SmsClient"/> class.
        /// </summary>
        /// <param name="httpClient">The HTTP client to use. The caller is expected to manage this resource and it will not be disposed.</param>
        /// <param name="tokenProviderFactory">The Logic access token provider factory.</param>
        /// <param name="options">The required configuration options.</param>
        public SmsClient(
            HttpClient httpClient,
            ITokenProviderFactory tokenProviderFactory,
            SmsOptions options)
        {
            this.httpClient = httpClient ?? throw new ArgumentNullException(nameof(httpClient));
            this.options = options ?? throw new ArgumentNullException(nameof(options));
            this.tokenProviderFactory = tokenProviderFactory ?? throw new ArgumentNullException(nameof(tokenProviderFactory));
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SmsClient"/> class using bearer token.
        /// </summary>
        /// <param name="httpClient">The HTTP client to use. The caller is expected to manage this resource and it will not be disposed.</param>
        /// <param name="options">The required configuration options.</param>
        /// <param name="bearerToken">Required access token to authenticate with Sms module.</param>
        public SmsClient(
           HttpClient httpClient,
           string bearerToken,
           SmsOptions options)
        {
            this.httpClient = httpClient ?? throw new ArgumentNullException(nameof(httpClient));
            this.options = options ?? throw new ArgumentNullException(nameof(options));
            this.bearerToken = bearerToken ?? throw new ArgumentNullException(nameof(bearerToken));
        }

        /// <summary>
        /// Disposing the rest of the classes.
        /// </summary>
        public void Dispose()
        {
            this.httpClient?.Dispose();
            this.tokenProviderFactory?.Dispose();
            this.internalClient?.Dispose();
        }

        /// <summary>
        /// Create internal client.
        /// </summary>
        /// <returns>InternalClient.</returns>
        internal InternalClient CreateClient()
        {
            if (this.internalClient != null)
            {
                return this.internalClient;
            }

            TokenCredentials credentials;
            if (!string.IsNullOrEmpty(this.bearerToken))
            {
                credentials = new TokenCredentials(this.bearerToken);
                this.internalClient = new InternalClient(credentials)
                {
                    BaseUri = this.options.SmsServiceUri,
                };
            }
            else
            {
                var tokenProvider = this.tokenProviderFactory.GetProvider(this.httpClient);
                this.internalClient = new InternalClient(new TokenCredentials(tokenProvider))
                {
                    BaseUri = this.options.SmsServiceUri,
                };
            }

            return this.internalClient;
        }
    }
}
