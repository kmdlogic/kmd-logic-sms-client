using System;
using System.Net.Http;
using System.Threading.Tasks;
using Kmd.Logic.Identity.Authorization;
using Kmd.Logic.Sms.Client.Models;
using Kmd.Logic.Sms.Client.ServiceMessages;
using Kmd.Logic.Sms.Client.Types;
using Microsoft.Rest;
using Newtonsoft.Json;

namespace Kmd.Logic.Sms.Client
{
    /// <summary>
    /// Class to use the autogenerated client class to call APIs.
    /// </summary>
    public sealed class SmsClient : IDisposable
    {
        private readonly HttpClient httpClient;
        private readonly SmsOptions options;
        private readonly ITokenProviderFactory tokenProviderFactory;
        private InternalClient internalClient;

        /// <summary>
        /// Initializes a new instance of the <see cref="SmsClient"/> class.
        /// </summary>
        /// <param name="httpClient">The HTTP client to use. The caller is expected to manage this resource and it will not be disposed.</param>
        /// <param name="tokenProviderFactory">The Logic access token provider factory.</param>
        /// <param name="options">The required configuration options.</param>
        public SmsClient(HttpClient httpClient, ITokenProviderFactory tokenProviderFactory, SmsOptions options)
        {
            this.httpClient = httpClient ?? throw new ArgumentNullException(nameof(httpClient));
            this.tokenProviderFactory = tokenProviderFactory ?? throw new ArgumentNullException(nameof(tokenProviderFactory));
            this.options = options ?? throw new ArgumentNullException(nameof(options));
        }

        /// <summary>
        /// Send an SMS.
        /// </summary>
        /// <param name="createSmsRequestDetails"> Sms details to be created.</param>
        /// <returns>Response.</returns>
        public async Task<SmsResponseDetails> SendSms(SmsRequestDetails createSmsRequestDetails)
        {
            var client = this.CreateClient();

            var request = new SendSmsRequest(
                   toPhoneNumber: createSmsRequestDetails.ToPhoneNumber,
                   body: createSmsRequestDetails.Body,
                   callbackUrl: createSmsRequestDetails.CallbackUrl,
                   providerConfigurationId: createSmsRequestDetails.ProviderConfigurationId,
                   userData: createSmsRequestDetails.UserData);

            using var smsResponse = await client.SendSmsWithHttpMessagesAsync(
                 this.options.SubscriptionId,
                 request).ConfigureAwait(false);
            {
                switch (smsResponse?.Response?.StatusCode)
                {
                    case System.Net.HttpStatusCode.OK:
                        return SmsResponse((SendSmsResponse)smsResponse.Body);

                    case System.Net.HttpStatusCode.NotFound:
                        return null;

                    default:
                        throw new SmsException(smsResponse?.Body?.ToString() ?? "Invalid configuration provided to access Sms service");
                }
            }
        }

        private SmsResponseDetails SmsResponse(SendSmsResponse sendSmsResponse)
        {
            return new SmsResponseDetails(sendSmsResponse.SmsMessageId);

        }

        /// <summary>
        /// Create internal client.
        /// </summary>
        /// <returns>InternalClient.</returns>
        internal InternalClient CreateClient()
        {
            if (this.internalClient != null)
            {
                return this.internalClient;
            }

            var tokenProvider = this.tokenProviderFactory.GetProvider(this.httpClient);

            this.internalClient = new InternalClient(new TokenCredentials(tokenProvider))
            {
                BaseUri = this.options.SmsServiceUri,
            };

            return this.internalClient;
        }

        public void Dispose()
        {
            this.httpClient?.Dispose();
            this.tokenProviderFactory?.Dispose();
            this.internalClient?.Dispose();
        }
    }
}
