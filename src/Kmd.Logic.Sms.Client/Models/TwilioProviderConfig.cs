// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Kmd.Logic.Sms.Client.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    public partial class TwilioProviderConfig
    {
        /// <summary>
        /// Initializes a new instance of the TwilioProviderConfig class.
        /// </summary>
        public TwilioProviderConfig()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the TwilioProviderConfig class.
        /// </summary>
        public TwilioProviderConfig(string username, string password, string accountSid, string fromProperty, ServiceWindow smsServiceWindow = default(ServiceWindow))
        {
            Username = username;
            Password = password;
            AccountSid = accountSid;
            FromProperty = fromProperty;
            SmsServiceWindow = smsServiceWindow;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "username")]
        public string Username { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "password")]
        public string Password { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "accountSid")]
        public string AccountSid { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "from")]
        public string FromProperty { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "smsServiceWindow")]
        public ServiceWindow SmsServiceWindow { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Username == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Username");
            }
            if (Password == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Password");
            }
            if (AccountSid == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "AccountSid");
            }
            if (FromProperty == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "FromProperty");
            }
            if (SmsServiceWindow != null)
            {
                SmsServiceWindow.Validate();
            }
        }
    }
}
