// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Kmd.Logic.Sms.Client.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class SendBulkSmsRequest
    {
        /// <summary>
        /// Initializes a new instance of the SendBulkSmsRequest class.
        /// </summary>
        public SendBulkSmsRequest()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SendBulkSmsRequest class.
        /// </summary>
        /// <param name="toPhoneNumbers">Phone number of recipients, Limit
        /// maximum 20 recipients</param>
        /// <param name="body">The text of the SMS message</param>
        /// <param name="callbackUrl">If provided, this URL endpoint will
        /// receive a POST request when there is any
        /// change of the SMS message status (e.g. sending, sent and
        /// failed).</param>
        /// <param name="providerConfigurationId">A unique identifier that
        /// represents the SMS provider and associated configuration
        /// which this SMS message will be sent with.</param>
        /// <param name="userData">Can be anything, depends on user/consumer.
        /// If provided, this custom data will be passed to the
        /// callback.</param>
        public SendBulkSmsRequest(IList<ToPhoneNumber> toPhoneNumbers, string body, string callbackUrl = default(string), System.Guid? providerConfigurationId = default(System.Guid?), string userData = default(string))
        {
            ToPhoneNumbers = toPhoneNumbers;
            Body = body;
            CallbackUrl = callbackUrl;
            ProviderConfigurationId = providerConfigurationId;
            UserData = userData;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets phone number of recipients, Limit maximum 20
        /// recipients
        /// </summary>
        [JsonProperty(PropertyName = "toPhoneNumbers")]
        public IList<ToPhoneNumber> ToPhoneNumbers { get; set; }

        /// <summary>
        /// Gets or sets the text of the SMS message
        /// </summary>
        [JsonProperty(PropertyName = "body")]
        public string Body { get; set; }

        /// <summary>
        /// Gets or sets if provided, this URL endpoint will receive a POST
        /// request when there is any
        /// change of the SMS message status (e.g. sending, sent and failed).
        /// </summary>
        [JsonProperty(PropertyName = "callbackUrl")]
        public string CallbackUrl { get; set; }

        /// <summary>
        /// Gets or sets a unique identifier that represents the SMS provider
        /// and associated configuration
        /// which this SMS message will be sent with.
        /// </summary>
        [JsonProperty(PropertyName = "providerConfigurationId")]
        public System.Guid? ProviderConfigurationId { get; set; }

        /// <summary>
        /// Gets or sets can be anything, depends on user/consumer.
        /// If provided, this custom data will be passed to the callback.
        /// </summary>
        [JsonProperty(PropertyName = "userData")]
        public string UserData { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (ToPhoneNumbers == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ToPhoneNumbers");
            }
            if (Body == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Body");
            }
            if (ToPhoneNumbers != null)
            {
                foreach (var element in ToPhoneNumbers)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (Body != null)
            {
                if (Body.Length > 1600)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Body", 1600);
                }
                if (Body.Length < 1)
                {
                    throw new ValidationException(ValidationRules.MinLength, "Body", 1);
                }
            }
            if (UserData != null)
            {
                if (UserData.Length > 500)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "UserData", 500);
                }
                if (UserData.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "UserData", 0);
                }
            }
        }
    }
}
