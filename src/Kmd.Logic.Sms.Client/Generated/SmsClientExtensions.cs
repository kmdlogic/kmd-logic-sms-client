// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Kmd.Logic.Sms.Client
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for SmsClient.
    /// </summary>
    public static partial class SmsClientExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='request'>
            /// </param>
            public static object CreateFakeSmsProviderConfiguration(this ISmsClient operations, System.Guid subscriptionId, FakeProviderConfigurationRequest request)
            {
                return operations.CreateFakeSmsProviderConfigurationAsync(subscriptionId, request).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CreateFakeSmsProviderConfigurationAsync(this ISmsClient operations, System.Guid subscriptionId, FakeProviderConfigurationRequest request, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateFakeSmsProviderConfigurationWithHttpMessagesAsync(subscriptionId, request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Fetch Fake Provider Configurations Details for a specific
            /// ProviderConfigurationId.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='providerConfigurationId'>
            /// The Provider Configuration ID
            /// </param>
            /// <param name='subscriptionId'>
            /// The Subscription ID
            /// </param>
            public static object GetFakeSmsProviderConfiguration(this ISmsClient operations, System.Guid providerConfigurationId, System.Guid subscriptionId)
            {
                return operations.GetFakeSmsProviderConfigurationAsync(providerConfigurationId, subscriptionId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Fetch Fake Provider Configurations Details for a specific
            /// ProviderConfigurationId.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='providerConfigurationId'>
            /// The Provider Configuration ID
            /// </param>
            /// <param name='subscriptionId'>
            /// The Subscription ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetFakeSmsProviderConfigurationAsync(this ISmsClient operations, System.Guid providerConfigurationId, System.Guid subscriptionId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetFakeSmsProviderConfigurationWithHttpMessagesAsync(providerConfigurationId, subscriptionId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates a provider configuration which delivers SMS via Fake Provider.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// A valid SubscriptionId in which you are an owner/contributor
            /// </param>
            /// <param name='providerConfigurationId'>
            /// A valid ProviderConfigurationId of the config which needs to be updated
            /// </param>
            /// <param name='request'>
            /// The request body
            /// </param>
            public static object UpdateFakeSmsProviderConfiguration(this ISmsClient operations, System.Guid subscriptionId, System.Guid providerConfigurationId, FakeProviderConfigurationRequest request)
            {
                return operations.UpdateFakeSmsProviderConfigurationAsync(subscriptionId, providerConfigurationId, request).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates a provider configuration which delivers SMS via Fake Provider.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// A valid SubscriptionId in which you are an owner/contributor
            /// </param>
            /// <param name='providerConfigurationId'>
            /// A valid ProviderConfigurationId of the config which needs to be updated
            /// </param>
            /// <param name='request'>
            /// The request body
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UpdateFakeSmsProviderConfigurationAsync(this ISmsClient operations, System.Guid subscriptionId, System.Guid providerConfigurationId, FakeProviderConfigurationRequest request, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateFakeSmsProviderConfigurationWithHttpMessagesAsync(subscriptionId, providerConfigurationId, request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a provider configuration which delivers SMS via LINK Mobility SMS
            /// REST API (Common a.k.a. CGI).
            /// Url: https://linkmobility.com/services/link-sms-gateway/
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// A valid SubscriptionId in which you are an owner/contributor
            /// </param>
            /// <param name='request'>
            /// The request body
            /// </param>
            public static object CreateLinkMobilityCgiProviderConfiguration(this ISmsClient operations, System.Guid subscriptionId, LinkMobilityCgiProviderConfigProviderConfigurationRequest request)
            {
                return operations.CreateLinkMobilityCgiProviderConfigurationAsync(subscriptionId, request).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a provider configuration which delivers SMS via LINK Mobility SMS
            /// REST API (Common a.k.a. CGI).
            /// Url: https://linkmobility.com/services/link-sms-gateway/
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// A valid SubscriptionId in which you are an owner/contributor
            /// </param>
            /// <param name='request'>
            /// The request body
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CreateLinkMobilityCgiProviderConfigurationAsync(this ISmsClient operations, System.Guid subscriptionId, LinkMobilityCgiProviderConfigProviderConfigurationRequest request, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateLinkMobilityCgiProviderConfigurationWithHttpMessagesAsync(subscriptionId, request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Fetch Link Mobility Cgi provider configurations details for a specific
            /// ProviderConfigurationId.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='providerConfigurationId'>
            /// The Provider Configuration ID
            /// </param>
            /// <param name='subscriptionId'>
            /// The Subscription ID
            /// </param>
            public static LinkMobilityCgiProviderConfigProviderConfigurationResponse GetLinkMobilityCgiProviderConfiguration(this ISmsClient operations, System.Guid providerConfigurationId, System.Guid subscriptionId)
            {
                return operations.GetLinkMobilityCgiProviderConfigurationAsync(providerConfigurationId, subscriptionId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Fetch Link Mobility Cgi provider configurations details for a specific
            /// ProviderConfigurationId.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='providerConfigurationId'>
            /// The Provider Configuration ID
            /// </param>
            /// <param name='subscriptionId'>
            /// The Subscription ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LinkMobilityCgiProviderConfigProviderConfigurationResponse> GetLinkMobilityCgiProviderConfigurationAsync(this ISmsClient operations, System.Guid providerConfigurationId, System.Guid subscriptionId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetLinkMobilityCgiProviderConfigurationWithHttpMessagesAsync(providerConfigurationId, subscriptionId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates a provider configuration which delivers SMS via LINK Mobility SMS
            /// REST API (Common a.k.a. CGI).
            /// Url: https://linkmobility.com/services/link-sms-gateway/
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// A valid SubscriptionId in which you are an owner/contributor
            /// </param>
            /// <param name='providerConfigurationId'>
            /// A valid ProviderConfigurationId of the config which needs to be updated
            /// </param>
            /// <param name='request'>
            /// The request body
            /// </param>
            public static object UpdateLinkMobilityCgiProviderConfiguration(this ISmsClient operations, System.Guid subscriptionId, System.Guid providerConfigurationId, LinkMobilityCgiProviderConfigProviderConfigurationRequest request)
            {
                return operations.UpdateLinkMobilityCgiProviderConfigurationAsync(subscriptionId, providerConfigurationId, request).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates a provider configuration which delivers SMS via LINK Mobility SMS
            /// REST API (Common a.k.a. CGI).
            /// Url: https://linkmobility.com/services/link-sms-gateway/
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// A valid SubscriptionId in which you are an owner/contributor
            /// </param>
            /// <param name='providerConfigurationId'>
            /// A valid ProviderConfigurationId of the config which needs to be updated
            /// </param>
            /// <param name='request'>
            /// The request body
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UpdateLinkMobilityCgiProviderConfigurationAsync(this ISmsClient operations, System.Guid subscriptionId, System.Guid providerConfigurationId, LinkMobilityCgiProviderConfigProviderConfigurationRequest request, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateLinkMobilityCgiProviderConfigurationWithHttpMessagesAsync(subscriptionId, providerConfigurationId, request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a provider configuration which delivers SMS via Link Mobility.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// A valid SubscriptionId in which you are an owner/contributor
            /// </param>
            /// <param name='request'>
            /// The request body
            /// </param>
            public static object CreateLinkMobilityProviderConfiguration(this ISmsClient operations, System.Guid subscriptionId, ProviderConfigurationRequestLinkMobilityProviderConfig request)
            {
                return operations.CreateLinkMobilityProviderConfigurationAsync(subscriptionId, request).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a provider configuration which delivers SMS via Link Mobility.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// A valid SubscriptionId in which you are an owner/contributor
            /// </param>
            /// <param name='request'>
            /// The request body
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CreateLinkMobilityProviderConfigurationAsync(this ISmsClient operations, System.Guid subscriptionId, ProviderConfigurationRequestLinkMobilityProviderConfig request, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateLinkMobilityProviderConfigurationWithHttpMessagesAsync(subscriptionId, request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Fetch Link Mobility Provider Configurations Details for a specific
            /// ProviderConfigurationId.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='providerConfigurationId'>
            /// The Provider Configuration ID
            /// </param>
            /// <param name='subscriptionId'>
            /// The Subscription ID
            /// </param>
            public static ProviderConfigurationResponseLinkMobilityProviderConfig GetLinkMobilityProviderConfiguration(this ISmsClient operations, System.Guid providerConfigurationId, System.Guid subscriptionId)
            {
                return operations.GetLinkMobilityProviderConfigurationAsync(providerConfigurationId, subscriptionId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Fetch Link Mobility Provider Configurations Details for a specific
            /// ProviderConfigurationId.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='providerConfigurationId'>
            /// The Provider Configuration ID
            /// </param>
            /// <param name='subscriptionId'>
            /// The Subscription ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ProviderConfigurationResponseLinkMobilityProviderConfig> GetLinkMobilityProviderConfigurationAsync(this ISmsClient operations, System.Guid providerConfigurationId, System.Guid subscriptionId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetLinkMobilityProviderConfigurationWithHttpMessagesAsync(providerConfigurationId, subscriptionId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates a provider configuration which delivers SMS via Link Mobility.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// A valid SubscriptionId in which you are an owner/contributor
            /// </param>
            /// <param name='providerConfigurationId'>
            /// A valid ProviderConfigurationId of the config which needs to be updated
            /// </param>
            /// <param name='request'>
            /// The request body
            /// </param>
            public static object UpdateLinkMobilityProviderConfiguration(this ISmsClient operations, System.Guid subscriptionId, System.Guid providerConfigurationId, ProviderConfigurationRequestLinkMobilityProviderConfig request)
            {
                return operations.UpdateLinkMobilityProviderConfigurationAsync(subscriptionId, providerConfigurationId, request).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates a provider configuration which delivers SMS via Link Mobility.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// A valid SubscriptionId in which you are an owner/contributor
            /// </param>
            /// <param name='providerConfigurationId'>
            /// A valid ProviderConfigurationId of the config which needs to be updated
            /// </param>
            /// <param name='request'>
            /// The request body
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UpdateLinkMobilityProviderConfigurationAsync(this ISmsClient operations, System.Guid subscriptionId, System.Guid providerConfigurationId, ProviderConfigurationRequestLinkMobilityProviderConfig request, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateLinkMobilityProviderConfigurationWithHttpMessagesAsync(subscriptionId, providerConfigurationId, request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a Provider configuration which delivers SMS via Logic.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// A valid SubscriptionId in which you are an owner/contributor
            /// </param>
            /// <param name='request'>
            /// The request body
            /// </param>
            public static object CreateLogicProviderConfiguration(this ISmsClient operations, System.Guid subscriptionId, LogicProviderConfigurationRequestLogicProviderConfig request)
            {
                return operations.CreateLogicProviderConfigurationAsync(subscriptionId, request).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a Provider configuration which delivers SMS via Logic.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// A valid SubscriptionId in which you are an owner/contributor
            /// </param>
            /// <param name='request'>
            /// The request body
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CreateLogicProviderConfigurationAsync(this ISmsClient operations, System.Guid subscriptionId, LogicProviderConfigurationRequestLogicProviderConfig request, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateLogicProviderConfigurationWithHttpMessagesAsync(subscriptionId, request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Fetch Logic Provider Configurations for a specific ProviderConfigurationId.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='providerConfigurationId'>
            /// The Provider Configuration ID
            /// </param>
            /// <param name='subscriptionId'>
            /// The Subscription ID
            /// </param>
            public static ProviderConfigurationResponseLogicProviderConfig GetLogicProviderConfiguration(this ISmsClient operations, System.Guid providerConfigurationId, System.Guid subscriptionId)
            {
                return operations.GetLogicProviderConfigurationAsync(providerConfigurationId, subscriptionId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Fetch Logic Provider Configurations for a specific ProviderConfigurationId.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='providerConfigurationId'>
            /// The Provider Configuration ID
            /// </param>
            /// <param name='subscriptionId'>
            /// The Subscription ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ProviderConfigurationResponseLogicProviderConfig> GetLogicProviderConfigurationAsync(this ISmsClient operations, System.Guid providerConfigurationId, System.Guid subscriptionId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetLogicProviderConfigurationWithHttpMessagesAsync(providerConfigurationId, subscriptionId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates a provider configuration which delivers SMS via Logic.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// A valid SubscriptionId in which you are an owner/contributor
            /// </param>
            /// <param name='providerConfigurationId'>
            /// A valid ProviderConfigurationId of the config which needs to be updated
            /// </param>
            /// <param name='request'>
            /// The request body
            /// </param>
            public static object UpdateLogicProviderConfiguration(this ISmsClient operations, System.Guid subscriptionId, System.Guid providerConfigurationId, LogicProviderConfigurationRequestLogicProviderConfig request)
            {
                return operations.UpdateLogicProviderConfigurationAsync(subscriptionId, providerConfigurationId, request).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates a provider configuration which delivers SMS via Logic.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// A valid SubscriptionId in which you are an owner/contributor
            /// </param>
            /// <param name='providerConfigurationId'>
            /// A valid ProviderConfigurationId of the config which needs to be updated
            /// </param>
            /// <param name='request'>
            /// The request body
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UpdateLogicProviderConfigurationAsync(this ISmsClient operations, System.Guid subscriptionId, System.Guid providerConfigurationId, LogicProviderConfigurationRequestLogicProviderConfig request, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateLogicProviderConfigurationWithHttpMessagesAsync(subscriptionId, providerConfigurationId, request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists all available provider configurations for the subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The subscription ID
            /// </param>
            public static IList<ProviderConfigurationListItem> GetAllProviderConfigurations(this ISmsClient operations, System.Guid subscriptionId)
            {
                return operations.GetAllProviderConfigurationsAsync(subscriptionId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists all available provider configurations for the subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The subscription ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<ProviderConfigurationListItem>> GetAllProviderConfigurationsAsync(this ISmsClient operations, System.Guid subscriptionId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllProviderConfigurationsWithHttpMessagesAsync(subscriptionId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete Provider Configurations for a specific ProviderConfigurationId.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Subscription ID
            /// </param>
            /// <param name='providerConfigurationId'>
            /// The Provider Configuration ID
            /// </param>
            public static void DeleteProviderConfiguration(this ISmsClient operations, System.Guid subscriptionId, System.Guid providerConfigurationId)
            {
                operations.DeleteProviderConfigurationAsync(subscriptionId, providerConfigurationId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete Provider Configurations for a specific ProviderConfigurationId.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// The Subscription ID
            /// </param>
            /// <param name='providerConfigurationId'>
            /// The Provider Configuration ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteProviderConfigurationAsync(this ISmsClient operations, System.Guid subscriptionId, System.Guid providerConfigurationId, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteProviderConfigurationWithHttpMessagesAsync(subscriptionId, providerConfigurationId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Retrieve message delivery details by message Id
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Consumer subscription Id
            /// </param>
            /// <param name='smsMessageId'>
            /// A unique identifier for the SMS message
            /// </param>
            public static GetSmsResponse GetSms(this ISmsClient operations, System.Guid subscriptionId, System.Guid smsMessageId)
            {
                return operations.GetSmsAsync(subscriptionId, smsMessageId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieve message delivery details by message Id
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Consumer subscription Id
            /// </param>
            /// <param name='smsMessageId'>
            /// A unique identifier for the SMS message
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GetSmsResponse> GetSmsAsync(this ISmsClient operations, System.Guid subscriptionId, System.Guid smsMessageId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSmsWithHttpMessagesAsync(subscriptionId, smsMessageId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Sends a single SMS message.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Consumer subscription Id
            /// </param>
            /// <param name='request'>
            /// </param>
            public static object SendSms(this ISmsClient operations, System.Guid subscriptionId, SendSmsRequest request)
            {
                return operations.SendSmsAsync(subscriptionId, request).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Sends a single SMS message.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// Consumer subscription Id
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> SendSmsAsync(this ISmsClient operations, System.Guid subscriptionId, SendSmsRequest request, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SendSmsWithHttpMessagesAsync(subscriptionId, request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a provider configuration which delivers SMS via Twilio.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// A valid SubscriptionId in which you are an owner/contributor
            /// </param>
            /// <param name='request'>
            /// The request body
            /// </param>
            public static object CreateTwilioProviderConfiguration(this ISmsClient operations, System.Guid subscriptionId, ProviderConfigurationRequestTwilioProviderConfig request)
            {
                return operations.CreateTwilioProviderConfigurationAsync(subscriptionId, request).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a provider configuration which delivers SMS via Twilio.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// A valid SubscriptionId in which you are an owner/contributor
            /// </param>
            /// <param name='request'>
            /// The request body
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CreateTwilioProviderConfigurationAsync(this ISmsClient operations, System.Guid subscriptionId, ProviderConfigurationRequestTwilioProviderConfig request, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateTwilioProviderConfigurationWithHttpMessagesAsync(subscriptionId, request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Fetch Twilio Provider Configurations for a specific
            /// ProviderConfigurationId.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='providerConfigurationId'>
            /// The Provider Configuration ID
            /// </param>
            /// <param name='subscriptionId'>
            /// The Subscription ID
            /// </param>
            public static ProviderConfigurationResponseTwilioProviderConfig GetTwilioProviderConfiguration(this ISmsClient operations, System.Guid providerConfigurationId, System.Guid subscriptionId)
            {
                return operations.GetTwilioProviderConfigurationAsync(providerConfigurationId, subscriptionId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Fetch Twilio Provider Configurations for a specific
            /// ProviderConfigurationId.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='providerConfigurationId'>
            /// The Provider Configuration ID
            /// </param>
            /// <param name='subscriptionId'>
            /// The Subscription ID
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ProviderConfigurationResponseTwilioProviderConfig> GetTwilioProviderConfigurationAsync(this ISmsClient operations, System.Guid providerConfigurationId, System.Guid subscriptionId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTwilioProviderConfigurationWithHttpMessagesAsync(providerConfigurationId, subscriptionId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates a provider configuration which delivers SMS via Twilio.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// A valid SubscriptionId in which you are an owner/contributor
            /// </param>
            /// <param name='providerConfigurationId'>
            /// A valid ProviderConfigurationId of the config which needs to be updated
            /// </param>
            /// <param name='request'>
            /// The request body
            /// </param>
            public static object UpdateTwilioProviderConfiguration(this ISmsClient operations, System.Guid subscriptionId, System.Guid providerConfigurationId, ProviderConfigurationRequestTwilioProviderConfig request)
            {
                return operations.UpdateTwilioProviderConfigurationAsync(subscriptionId, providerConfigurationId, request).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates a provider configuration which delivers SMS via Twilio.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='subscriptionId'>
            /// A valid SubscriptionId in which you are an owner/contributor
            /// </param>
            /// <param name='providerConfigurationId'>
            /// A valid ProviderConfigurationId of the config which needs to be updated
            /// </param>
            /// <param name='request'>
            /// The request body
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UpdateTwilioProviderConfigurationAsync(this ISmsClient operations, System.Guid subscriptionId, System.Guid providerConfigurationId, ProviderConfigurationRequestTwilioProviderConfig request, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateTwilioProviderConfigurationWithHttpMessagesAsync(subscriptionId, providerConfigurationId, request, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
