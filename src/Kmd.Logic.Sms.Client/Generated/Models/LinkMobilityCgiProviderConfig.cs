// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Kmd.Logic.Sms.Client.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    public partial class LinkMobilityCgiProviderConfig
    {
        /// <summary>
        /// Initializes a new instance of the LinkMobilityCgiProviderConfig
        /// class.
        /// </summary>
        public LinkMobilityCgiProviderConfig()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the LinkMobilityCgiProviderConfig
        /// class.
        /// </summary>
        /// <param name="source">This is the source from where the message
        /// should be sent. 3 to 11 valid GSM characters. Some operators
        /// and some handsets don’t accept all characters. Safe characters are
        /// a-z, A-Z, 0-9.</param>
        /// <param name="userName">Provided to you by LINK Mobility
        /// Support</param>
        /// <param name="password">Provided to you by LINK Mobility
        /// Support</param>
        /// <param name="platformId">Provided to you by LINK Mobility
        /// Support</param>
        /// <param name="platformPartnerId">Provided to you by LINK Mobility
        /// Support</param>
        /// <param name="smsServiceWindow">The service window, if specified,
        /// will determine when SMS are delivered. SMS sent outside of the
        /// service window will be queued until the start of the next service
        /// window.</param>
        public LinkMobilityCgiProviderConfig(string source, string userName, string password, string platformId, string platformPartnerId, ServiceWindow smsServiceWindow = default(ServiceWindow))
        {
            SmsServiceWindow = smsServiceWindow;
            Source = source;
            UserName = userName;
            Password = password;
            PlatformId = platformId;
            PlatformPartnerId = platformPartnerId;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the service window, if specified, will determine when
        /// SMS are delivered. SMS sent outside of the
        /// service window will be queued until the start of the next service
        /// window.
        /// </summary>
        [JsonProperty(PropertyName = "smsServiceWindow")]
        public ServiceWindow SmsServiceWindow { get; set; }

        /// <summary>
        /// Gets or sets this is the source from where the message should be
        /// sent. 3 to 11 valid GSM characters. Some operators
        /// and some handsets don’t accept all characters. Safe characters are
        /// a-z, A-Z, 0-9.
        /// </summary>
        [JsonProperty(PropertyName = "source")]
        public string Source { get; set; }

        /// <summary>
        /// Gets or sets provided to you by LINK Mobility Support
        /// </summary>
        [JsonProperty(PropertyName = "userName")]
        public string UserName { get; set; }

        /// <summary>
        /// Gets or sets provided to you by LINK Mobility Support
        /// </summary>
        [JsonProperty(PropertyName = "password")]
        public string Password { get; set; }

        /// <summary>
        /// Gets or sets provided to you by LINK Mobility Support
        /// </summary>
        [JsonProperty(PropertyName = "platformId")]
        public string PlatformId { get; set; }

        /// <summary>
        /// Gets or sets provided to you by LINK Mobility Support
        /// </summary>
        [JsonProperty(PropertyName = "platformPartnerId")]
        public string PlatformPartnerId { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Source == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Source");
            }
            if (UserName == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "UserName");
            }
            if (Password == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Password");
            }
            if (PlatformId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "PlatformId");
            }
            if (PlatformPartnerId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "PlatformPartnerId");
            }
            if (SmsServiceWindow != null)
            {
                SmsServiceWindow.Validate();
            }
            if (Source != null)
            {
                if (Source.Length > 11)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Source", 11);
                }
                if (Source.Length < 3)
                {
                    throw new ValidationException(ValidationRules.MinLength, "Source", 3);
                }
                if (!System.Text.RegularExpressions.Regex.IsMatch(Source, "^([a-zA-Z0-9])+\\z"))
                {
                    throw new ValidationException(ValidationRules.Pattern, "Source", "^([a-zA-Z0-9])+\\z");
                }
            }
        }
    }
}
