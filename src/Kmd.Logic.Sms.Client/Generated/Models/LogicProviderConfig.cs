// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Kmd.Logic.Sms.Client.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    public partial class LogicProviderConfig
    {
        /// <summary>
        /// Initializes a new instance of the LogicProviderConfig class.
        /// </summary>
        public LogicProviderConfig()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the LogicProviderConfig class.
        /// </summary>
        /// <param name="description">Gets the description used to help
        /// identify this provider configuration.</param>
        /// <param name="isApproved">Determines if this configuration is
        /// approved by the logic platform for use. Any logic provider
        /// must first be approved before it can be used.</param>
        /// <param name="sender">If not specified, the Logic DevOps team will
        /// need to provide this value
        /// before you can send SMS using this provider configuration. Example
        /// values
        /// might be 'logic' or 'kmd' or 'føniks' etc.</param>
        public LogicProviderConfig(string description = default(string), bool? isApproved = default(bool?), string sender = default(string), ServiceWindow smsServiceWindow = default(ServiceWindow))
        {
            Description = description;
            IsApproved = isApproved;
            Sender = sender;
            SmsServiceWindow = smsServiceWindow;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets the description used to help identify this provider
        /// configuration.
        /// </summary>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets determines if this configuration is approved by the
        /// logic platform for use. Any logic provider
        /// must first be approved before it can be used.
        /// </summary>
        [JsonProperty(PropertyName = "isApproved")]
        public bool? IsApproved { get; set; }

        /// <summary>
        /// Gets or sets if not specified, the Logic DevOps team will need to
        /// provide this value
        /// before you can send SMS using this provider configuration. Example
        /// values
        /// might be 'logic' or 'kmd' or 'føniks' etc.
        /// </summary>
        [JsonProperty(PropertyName = "sender")]
        public string Sender { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "smsServiceWindow")]
        public ServiceWindow SmsServiceWindow { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Sender != null)
            {
                if (Sender.Length > 11)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Sender", 11);
                }
                if (Sender.Length < 1)
                {
                    throw new ValidationException(ValidationRules.MinLength, "Sender", 1);
                }
                if (!System.Text.RegularExpressions.Regex.IsMatch(Sender, "\\w+$"))
                {
                    throw new ValidationException(ValidationRules.Pattern, "Sender", "\\w+$");
                }
            }
            if (SmsServiceWindow != null)
            {
                SmsServiceWindow.Validate();
            }
        }
    }
}
